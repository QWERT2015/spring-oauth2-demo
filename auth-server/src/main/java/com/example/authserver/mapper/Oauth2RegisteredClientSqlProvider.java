package com.example.authserver.mapper;

import com.example.authserver.model.Oauth2RegisteredClient;
import com.example.authserver.model.Oauth2RegisteredClientExample.Criteria;
import com.example.authserver.model.Oauth2RegisteredClientExample.Criterion;
import com.example.authserver.model.Oauth2RegisteredClientExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class Oauth2RegisteredClientSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String countByExample(Oauth2RegisteredClientExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("oauth2_registered_client");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String deleteByExample(Oauth2RegisteredClientExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("oauth2_registered_client");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String insertSelective(Oauth2RegisteredClient row) {
        SQL sql = new SQL();
        sql.INSERT_INTO("oauth2_registered_client");
        
        if (row.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=VARCHAR}");
        }
        
        if (row.getClientId() != null) {
            sql.VALUES("client_id", "#{clientId,jdbcType=VARCHAR}");
        }
        
        if (row.getClientIdIssuedAt() != null) {
            sql.VALUES("client_id_issued_at", "#{clientIdIssuedAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getClientSecret() != null) {
            sql.VALUES("client_secret", "#{clientSecret,jdbcType=VARCHAR}");
        }
        
        if (row.getClientSecretExpiresAt() != null) {
            sql.VALUES("client_secret_expires_at", "#{clientSecretExpiresAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getClientName() != null) {
            sql.VALUES("client_name", "#{clientName,jdbcType=VARCHAR}");
        }
        
        if (row.getClientAuthenticationMethods() != null) {
            sql.VALUES("client_authentication_methods", "#{clientAuthenticationMethods,jdbcType=VARCHAR}");
        }
        
        if (row.getAuthorizationGrantTypes() != null) {
            sql.VALUES("authorization_grant_types", "#{authorizationGrantTypes,jdbcType=VARCHAR}");
        }
        
        if (row.getRedirectUris() != null) {
            sql.VALUES("redirect_uris", "#{redirectUris,jdbcType=VARCHAR}");
        }
        
        if (row.getPostLogoutRedirectUris() != null) {
            sql.VALUES("post_logout_redirect_uris", "#{postLogoutRedirectUris,jdbcType=VARCHAR}");
        }
        
        if (row.getScopes() != null) {
            sql.VALUES("scopes", "#{scopes,jdbcType=VARCHAR}");
        }
        
        if (row.getClientSettings() != null) {
            sql.VALUES("client_settings", "#{clientSettings,jdbcType=VARCHAR}");
        }
        
        if (row.getTokenSettings() != null) {
            sql.VALUES("token_settings", "#{tokenSettings,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String selectByExample(Oauth2RegisteredClientExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("client_id");
        sql.SELECT("client_id_issued_at");
        sql.SELECT("client_secret");
        sql.SELECT("client_secret_expires_at");
        sql.SELECT("client_name");
        sql.SELECT("client_authentication_methods");
        sql.SELECT("authorization_grant_types");
        sql.SELECT("redirect_uris");
        sql.SELECT("post_logout_redirect_uris");
        sql.SELECT("scopes");
        sql.SELECT("client_settings");
        sql.SELECT("token_settings");
        sql.FROM("oauth2_registered_client");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Oauth2RegisteredClient row = (Oauth2RegisteredClient) parameter.get("row");
        Oauth2RegisteredClientExample example = (Oauth2RegisteredClientExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("oauth2_registered_client");
        
        if (row.getId() != null) {
            sql.SET("id = #{row.id,jdbcType=VARCHAR}");
        }
        
        if (row.getClientId() != null) {
            sql.SET("client_id = #{row.clientId,jdbcType=VARCHAR}");
        }
        
        if (row.getClientIdIssuedAt() != null) {
            sql.SET("client_id_issued_at = #{row.clientIdIssuedAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getClientSecret() != null) {
            sql.SET("client_secret = #{row.clientSecret,jdbcType=VARCHAR}");
        }
        
        if (row.getClientSecretExpiresAt() != null) {
            sql.SET("client_secret_expires_at = #{row.clientSecretExpiresAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getClientName() != null) {
            sql.SET("client_name = #{row.clientName,jdbcType=VARCHAR}");
        }
        
        if (row.getClientAuthenticationMethods() != null) {
            sql.SET("client_authentication_methods = #{row.clientAuthenticationMethods,jdbcType=VARCHAR}");
        }
        
        if (row.getAuthorizationGrantTypes() != null) {
            sql.SET("authorization_grant_types = #{row.authorizationGrantTypes,jdbcType=VARCHAR}");
        }
        
        if (row.getRedirectUris() != null) {
            sql.SET("redirect_uris = #{row.redirectUris,jdbcType=VARCHAR}");
        }
        
        if (row.getPostLogoutRedirectUris() != null) {
            sql.SET("post_logout_redirect_uris = #{row.postLogoutRedirectUris,jdbcType=VARCHAR}");
        }
        
        if (row.getScopes() != null) {
            sql.SET("scopes = #{row.scopes,jdbcType=VARCHAR}");
        }
        
        if (row.getClientSettings() != null) {
            sql.SET("client_settings = #{row.clientSettings,jdbcType=VARCHAR}");
        }
        
        if (row.getTokenSettings() != null) {
            sql.SET("token_settings = #{row.tokenSettings,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("oauth2_registered_client");
        
        sql.SET("id = #{row.id,jdbcType=VARCHAR}");
        sql.SET("client_id = #{row.clientId,jdbcType=VARCHAR}");
        sql.SET("client_id_issued_at = #{row.clientIdIssuedAt,jdbcType=TIMESTAMP}");
        sql.SET("client_secret = #{row.clientSecret,jdbcType=VARCHAR}");
        sql.SET("client_secret_expires_at = #{row.clientSecretExpiresAt,jdbcType=TIMESTAMP}");
        sql.SET("client_name = #{row.clientName,jdbcType=VARCHAR}");
        sql.SET("client_authentication_methods = #{row.clientAuthenticationMethods,jdbcType=VARCHAR}");
        sql.SET("authorization_grant_types = #{row.authorizationGrantTypes,jdbcType=VARCHAR}");
        sql.SET("redirect_uris = #{row.redirectUris,jdbcType=VARCHAR}");
        sql.SET("post_logout_redirect_uris = #{row.postLogoutRedirectUris,jdbcType=VARCHAR}");
        sql.SET("scopes = #{row.scopes,jdbcType=VARCHAR}");
        sql.SET("client_settings = #{row.clientSettings,jdbcType=VARCHAR}");
        sql.SET("token_settings = #{row.tokenSettings,jdbcType=VARCHAR}");
        
        Oauth2RegisteredClientExample example = (Oauth2RegisteredClientExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    public String updateByPrimaryKeySelective(Oauth2RegisteredClient row) {
        SQL sql = new SQL();
        sql.UPDATE("oauth2_registered_client");
        
        if (row.getClientId() != null) {
            sql.SET("client_id = #{clientId,jdbcType=VARCHAR}");
        }
        
        if (row.getClientIdIssuedAt() != null) {
            sql.SET("client_id_issued_at = #{clientIdIssuedAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getClientSecret() != null) {
            sql.SET("client_secret = #{clientSecret,jdbcType=VARCHAR}");
        }
        
        if (row.getClientSecretExpiresAt() != null) {
            sql.SET("client_secret_expires_at = #{clientSecretExpiresAt,jdbcType=TIMESTAMP}");
        }
        
        if (row.getClientName() != null) {
            sql.SET("client_name = #{clientName,jdbcType=VARCHAR}");
        }
        
        if (row.getClientAuthenticationMethods() != null) {
            sql.SET("client_authentication_methods = #{clientAuthenticationMethods,jdbcType=VARCHAR}");
        }
        
        if (row.getAuthorizationGrantTypes() != null) {
            sql.SET("authorization_grant_types = #{authorizationGrantTypes,jdbcType=VARCHAR}");
        }
        
        if (row.getRedirectUris() != null) {
            sql.SET("redirect_uris = #{redirectUris,jdbcType=VARCHAR}");
        }
        
        if (row.getPostLogoutRedirectUris() != null) {
            sql.SET("post_logout_redirect_uris = #{postLogoutRedirectUris,jdbcType=VARCHAR}");
        }
        
        if (row.getScopes() != null) {
            sql.SET("scopes = #{scopes,jdbcType=VARCHAR}");
        }
        
        if (row.getClientSettings() != null) {
            sql.SET("client_settings = #{clientSettings,jdbcType=VARCHAR}");
        }
        
        if (row.getTokenSettings() != null) {
            sql.SET("token_settings = #{tokenSettings,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth2_registered_client
     *
     * @mbg.generated Thu Aug 31 10:44:16 CST 2023
     */
    protected void applyWhere(SQL sql, Oauth2RegisteredClientExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}